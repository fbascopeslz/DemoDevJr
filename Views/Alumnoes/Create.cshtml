@model DemoDevJr.Models.Alumno

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/_Layout.cshtml";
}

<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Alumno</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.rude, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.rude, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.rude, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.imagen, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="file-upload-form">
                    <input type="file" id="imagenAlumno" accept="image/*" class="form-control">
                </div>
                <div id="ocultarImagenAlumno" class="image-preview">
                    <img id="imagenPreviewAlumno" class="preview" src="">
                </div>

                <input type="hidden" name="imagen" id="inputUrlImagenAlumno"/>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.nombres, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.nombres, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.nombres, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.apellidoPaterno, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.apellidoPaterno, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.apellidoPaterno, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.apellidoMaterno, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.apellidoMaterno, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.apellidoMaterno, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.sexo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.sexo, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.sexo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.lugarNacimiento, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.lugarNacimiento, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.lugarNacimiento, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.fechaNacimiento, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input name="fechaNacimiento" type="date" class="form-control">
                @Html.ValidationMessageFor(model => model.fechaNacimiento, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ci, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ci, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ci, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.direccion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.direccion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.direccion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.zona, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.zona, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.zona, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.telefono, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.telefono, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.telefono, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


<style>
    .file-upload-form, .image-preview {
        font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
        padding: 20px;
    }

    img.preview {
        width: 300px;
        background-color: white;
        border: 1px solid #DDD;
        padding: 5px;
    }
</style>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <script>        
        $(function () {            
            //$(".datepicker").datepicker();
            //$(".datepicker").datepicker("option", "dateFormat", "dd-mm-yy");

            $("#ocultarImagenAlumno").hide();

            $("#imagenAlumno").change(function (e) {
                if (e.target.files && e.target.files[0]) {
                    const image = e.target.files[0];
                    const reader = new FileReader();
                    reader.onload = e => {
                        //la imagen en base64 al img
                        $("#imagenPreviewAlumno").attr("src", e.target.result);
                        $("#ocultarImagenAlumno").show();

                        var data = new FormData();
                        data.append('upload_preset', 'ml_default');
                        data.append('file', e.target.result);
                        data.append('cloud_name', 'drejdx5z4');
                        const config = {
                            method: "POST",
                            body: data
                        };
                        const imgurl = "https://api.cloudinary.com/v1_1/drejdx5z4/image/upload";                                                                  
                        axios.post(imgurl, data)
                            .then(function (response) {
                                // handle success                                
                                var res = response.data;
                                console.log(res.secure_url);
                                $('#inputUrlImagenAlumno').val(res.secure_url);
                            })
                            .catch(function (error) {
                                // handle error
                                console.log(error);
                            })
                            .then(function () {
                                // always executed
                            });

                    };
                    reader.readAsDataURL(image);
                }
            });
        });
    </script>

}
